// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: BUSL-1.1

package api

// HostVolume represents a Dynamic Host Volume: a volume associated with a
// specific Nomad client agent but created via API.
type HostVolume struct {
	// Namespace is the Nomad namespace for the host volume, which constrains
	// which jobs can mount it.
	Namespace string

	// ID is a UUID-like string generated by the server.
	ID string

	// Name is the name that group.volume will use to identify the volume
	// source. Not expected to be unique.
	Name string

	// PluginID is the name of the host volume plugin on the client that will be
	// used for creating the volume. If omitted, the client will use its default
	// built-in plugin.
	PluginID string

	// NodePool is the node pool of the node where the volume is placed. If the
	// you don't provide a node ID, a node will be selected using the NodePool
	// and Constraints. If you provide both NodePool and NodeID, NodePool will
	// be used to validate the request. If omitted, the server will populate
	// this value in before writing the volume to Raft.
	NodePool string

	// NodeID is the node where the volume is placed. If you don't provide a
	// NodeID, one will be selected using the NodePool and Constraints. If
	// omitted, this field will then be populated by the server before writing
	// the volume to Raft.
	NodeID string

	// Constraints are optional. If the NodeID is not provided, the NodePool and
	// Constraints are used to select a node. If the NodeID is provided,
	// Constraints are used to validate that the node meets those constraints at
	// the time of volume creation.
	Constraints []*Constraint

	// Because storage may allow only specific intervals of size, we accept a
	// min and max and return the actual capacity when the volume is created or
	// updated on the client
	RequestedCapacityMin int64 // bytes
	RequestedCapacityMax int64 // bytes
	Capacity             int64 // bytes

	// RequestedCapabilities defines the options available to group.volume
	// blocks. The scheduler checks against the listed capability blocks and
	// selects a node for placement if *any* capability block works.
	RequestedCapabilities []*HostVolumeCapability

	// Parameters are an opaque map of parameters for the host volume plugin.
	Parameters map[string]string

	// HostPath is the path on disk where the volume's mount point was
	// created. We record this to make debugging easier.
	HostPath string

	// State represents the overall state of the volume. One of pending, ready,
	// deleted.
	State HostVolumeState

	CreateIndex uint64
	CreateTime  uint64

	ModifyIndex uint64
	ModifyTime  uint64

	// Allocations is the list of non-client-terminal allocations with claims on
	// this host volume. They are denormalized on read and this field will be
	// never written to Raft
	Allocations []*AllocationListStub
}

type HostVolumeState string

const (
	HostVolumeStatePending HostVolumeState = "pending"
	HostVolumeStateReady   HostVolumeState = "ready"
	HostVolumeStateDeleted HostVolumeState = "deleted"
)

// HostVolumeCapability is the requested attachment and access mode for a volume
type HostVolumeCapability struct {
	AttachmentMode HostVolumeAttachmentMode
	AccessMode     HostVolumeAccessMode
}

// HostVolumeAttachmentMode chooses the type of storage API that will be used to
// interact with the device.
type HostVolumeAttachmentMode string

const (
	HostVolumeAttachmentModeUnknown     HostVolumeAttachmentMode = ""
	HostVolumeAttachmentModeBlockDevice HostVolumeAttachmentMode = "block-device"
	HostVolumeAttachmentModeFilesystem  HostVolumeAttachmentMode = "file-system"
)

// HostVolumeAccessMode indicates how Nomad should make the volume available to
// concurrent allocations.
type HostVolumeAccessMode string

const (
	HostVolumeAccessModeUnknown HostVolumeAccessMode = ""

	HostVolumeAccessModeSingleNodeReader HostVolumeAccessMode = "single-node-reader-only"
	HostVolumeAccessModeSingleNodeWriter HostVolumeAccessMode = "single-node-writer"

	HostVolumeAccessModeMultiNodeReader       HostVolumeAccessMode = "multi-node-reader-only"
	HostVolumeAccessModeMultiNodeSingleWriter HostVolumeAccessMode = "multi-node-single-writer"
	HostVolumeAccessModeMultiNodeMultiWriter  HostVolumeAccessMode = "multi-node-multi-writer"
)

// HostVolumeStub is returned in responses to the List Volumes endpoint
type HostVolumeStub struct {
	Namespace string
	ID        string
	Name      string
	PluginID  string
	NodePool  string
	NodeID    string
	Capacity  int64 // bytes
	State     HostVolumeState

	CreateIndex uint64
	CreateTime  uint64

	ModifyIndex uint64
	ModifyTime  uint64
}
